#include "rclcpp/rclcpp.hpp"
#include "sensor_msgs/msg/compressed_image.hpp"
#include "geometry_msgs/msg/vector3.hpp"
#include "sensor_msgs/msg/laser_scan.hpp"
#include "opencv2/opencv.hpp"
#include <memory>
#include <functional>
#include <iostream>
#include <math.h>
#include <chrono>
#include <algorithm>
#include "std_msgs/msg/int32.hpp"

#define RAD2DEG(x) ((x)*180./M_PI)
#define LENGTH 800.0    //객체 크기
#define IOR 250.0
#define ROI 250.0

using std::placeholders::_1;
using namespace std::chrono_literals;
using namespace cv;
using namespace std;

float degree = 100/90;
int err;

void mysub_callback(rclcpp::Node::SharedPtr node, const sensor_msgs::msg::LaserScan::SharedPtr scan)
{
    static auto qos_profile = rclcpp::QoS(rclcpp::KeepLast(10));
    static auto mypub = node->create_publisher<geometry_msgs::msg::Vector3>("/topic_dxlpub", qos_profile);
    geometry_msgs::msg::Vector3 vel_data;

    static cv::Mat img(LENGTH, LENGTH, CV_8UC3, cv::Scalar(255, 255, 255));
    img.setTo(cv::Scalar(255, 255, 255)); // 매번 새로 생성하지 않고 초기화

    int count = scan->scan_time / scan->time_increment;
    int x, y;
    float rx = 0, ry = 0, lx = 0, ly = 0, rh = 0, rw = 0, lw = 0, lh = 0, right_obj_min = 0, left_obj_min = 0, right_theta = 0, left_theta = 0;
    //라이다 데이터를 이용하여 물체검출
    for (int i = 0; i < count; i++) 
    {
        float degree = RAD2DEG(scan->angle_min + scan->angle_increment * i);
        x = LENGTH/2 + scan->ranges[i]*IOR * sin(degree*M_PI/180);
        y = LENGTH/2 + scan->ranges[i]*IOR * cos(degree*M_PI/180);
        cv::circle(img, cv::Point(x, y), 1, cv::Scalar(0, 0, 255), 2);
    }

    cv::Mat grayl, grayr;
    //가운데(로봇) 기준 왼쪽오른쪽 영역 나누기
    cv::Mat ROIL = img(cv::Rect(ROI, ROI, LENGTH/2-ROI, LENGTH/2-ROI));
    cv::Mat ROIR = img(cv::Rect(LENGTH/2+1, ROI, LENGTH/2-ROI+1, LENGTH/2-ROI));
    cv::cvtColor(ROIL, grayl, cv::COLOR_BGR2GRAY);
    cv::cvtColor(ROIR, grayr, cv::COLOR_BGR2GRAY);
    //왼쪽오른쪽 이진화
    cv::Mat binl, binr;
    cv::threshold(grayl, binl, 0, 255, cv::THRESH_BINARY_INV | cv::THRESH_OTSU);
    cv::threshold(grayr, binr, 0, 255, cv::THRESH_BINARY_INV | cv::THRESH_OTSU);
    //물체를 객체화 하는데 필요한 변수
    cv::Mat labelsl, statsl, centroidsl;
    cv::Mat labelsr, statsr, centroidsr;
    //객체 수 , 객체 번호,  x, y, width, height, area, 무게중심
    int cntl = cv::connectedComponentsWithStats(binl, labelsl, statsl, centroidsl);
    int cntr = cv::connectedComponentsWithStats(binr, labelsr, statsr, centroidsr);

    cv::Mat dstl, dstr;
    cv::cvtColor(binl, dstl, cv::COLOR_GRAY2BGR);
    cv::cvtColor(binr, dstr, cv::COLOR_GRAY2BGR);
    cv::circle(img, cv::Point(LENGTH/2, LENGTH/2), 2, cv::Scalar(0, 0, 0), 2);
    left_obj_min = sqrt((LENGTH/2-statsl.at<int>(1, 0)-statsl.at<int>(1, 2))*(LENGTH/2-statsl.at<int>(1, 0)-statsl.at<int>(1, 2))+(LENGTH/2-statsl.at<int>(1, 1)-statsl.at<int>(1, 3))*(LENGTH/2-statsl.at<int>(1, 1)-statsl.at<int>(1, 3)));
    right_obj_min = sqrt(statsr.at<int>(1, 0)*(statsr.at<int>(1, 0))+(LENGTH/2-statsr.at<int>(1, 1)-statsr.at<int>(1, 3))*(LENGTH/2-statsr.at<int>(1, 1)-statsr.at<int>(1, 3)));
    
    for (int i = 1;i < cntl;i++) 
    {
        int* p = statsl.ptr<int>(i);
        if(p[4]<50) { continue; }   //기준거리
        if(left_obj_min > sqrt((LENGTH/2-ROI-p[0]-p[2])*(LENGTH/2-ROI-p[0]-p[2])+(LENGTH/2-ROI-p[1]-p[3])*(LENGTH/2-ROI-p[1]-p[3])))
        {
            left_obj_min = sqrt((LENGTH/2-ROI-p[0]-p[2])*(LENGTH/2-ROI-p[0]-p[2])+(LENGTH/2-ROI-p[1]-p[3])*(LENGTH/2-ROI-p[1]-p[3]));
            lx = p[0];
            ly = p[1];
            lw = p[2];
            lh = p[3];
        }     
    }

    for (int j = 1;j < cntr;j++) 
    {
        int* p = statsr.ptr<int>(j);
        if(p[4]<50) { continue; }   //기준거리
        if(right_obj_min > sqrt(p[0]*p[0]+(LENGTH/2-ROI-p[1]-p[3])*(LENGTH/2-ROI-p[1]-p[3])))
        {
            right_obj_min = sqrt(p[0]*p[0]+(LENGTH/2-ROI-p[1]-p[3])*(LENGTH/2-ROI-p[1]-p[3]));
            rx = p[0];
            ry = p[1];
            rw = p[2];
            rh = p[3];
        } 
    }

    if(cntl == 1&&cntr != 1)
    {
        left_theta = 0;
        right_theta = atan((400-ROI-ry-rh)/(rx+0.0000001));
        left_obj_min = 200;
    }
    else if(cntr == 1&&cntl != 1)
    {
        left_theta = atan((400-ROI-ly-lh)/(400-ROI-lx-lw+0.0000001));
        right_theta = 0;
        right_obj_min = 200;
    }
    else if(cntl == 1&&cntr == 1)
    {
        left_theta = 0;
        right_theta = 0;
        left_obj_min = 200;
        right_obj_min = 200;
    }
    else
    {
        //중심점으로 부터의 기울기
        left_theta = atan((400-ROI-ly-lh)/(400-ROI-lx-lw+0.0000001));
        right_theta = atan((400-ROI-ry-rh)/(rx+0.0000001));
    }

    if(left_obj_min <= 50&&right_obj_min <= 50&&RAD2DEG(left_theta)>80&&RAD2DEG(right_theta)>80)err = 1;
    else if(left_obj_min <= 40&&RAD2DEG(right_theta)>80)err = 2;
    else if(right_obj_min <= 40&&RAD2DEG(left_theta)>80)err = 3;
    else if(left_obj_min <= 20&&right_obj_min > 20)err = 4;
    else if(right_obj_min <= 20&&left_obj_min > 20)err = 5;
    else err = (RAD2DEG(left_theta)-RAD2DEG(right_theta))/2;

    cv::imshow("img", img);
    cv::waitKey(1);

    if(err == 1)
    {
        vel_data.x = 100;//왼쪽 바퀴 속도
	    vel_data.x = 100;//오른쪽 바퀴 속도
    }
    else  if(err == 2)
    {
        vel_data.x = 100;//왼쪽 바퀴 속도
	    vel_data.y = 100;//오른쪽 바퀴 속도
    }
    else  if(err == 3)
    {
        vel_data.x = -100;//왼쪽 바퀴 속도
	    vel_data.y = -100;//오른쪽 바퀴 속도
    }
    else  if(err == 4)
    {
        vel_data.x = 100;//왼쪽 바퀴 속도
	    vel_data.y = 100;//오른쪽 바퀴 속도
    }
    else  if(err == 5)
    {
        vel_data.x = -100;//왼쪽 바퀴 속도
	    vel_data.y = -100;//오른쪽 바퀴 속도
    }
    else  if(err == 6)
    {
        vel_data.x = 100;//왼쪽 바퀴 속도
	    vel_data.y = 100;//오른쪽 바퀴 속도
    }
    else  if(err == 7)
    {
        vel_data.x = -100;//왼쪽 바퀴 속도
	    vel_data.y = -100;//오른쪽 바퀴 속도
    }
    else
    {
        vel_data.x = 50 - 0.7 * -err * 100;//왼쪽 바퀴 속도
	    vel_data.y = -(50+ 0.7 * -err * 100);//오른쪽 바퀴 속도
    }

    mypub->publish(vel_data);
}

int main(int argc, char* argv[])
{
    rclcpp::init(argc, argv);
    auto node = std::make_shared<rclcpp::Node>("camsub_wsl");
    auto qos_profile = rclcpp::QoS(rclcpp::KeepLast(10));
    std::function<void(const sensor_msgs::msg::LaserScan::SharedPtr scan)> fn;
    fn = std::bind(mysub_callback, node, _1);
    auto mysub = node->create_subscription<sensor_msgs::msg::LaserScan>("scan",qos_profile,fn);
    rclcpp::spin(node);
    rclcpp::shutdown();
    return 0;
}

